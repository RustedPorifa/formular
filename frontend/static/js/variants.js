class VariantsManager {
  constructor() {
    this.variantsHolder = document.getElementById("variants-holder");
    this.currentClass = this.extractClassFromUrl();
    this.apiUrl = this.buildApiUrl();
    this.init();
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –∏–∑ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä: http://127.0.0.1:5050/api/show/7 -> "7")
  extractClassFromUrl() {
    const pathSegments = window.location.pathname.split("/");

    // –ò—â–µ–º —Å–µ–≥–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º –ø–æ—Å–ª–µ /api/show/
    const showIndex = pathSegments.indexOf("show");
    if (showIndex !== -1 && showIndex + 1 < pathSegments.length) {
      return pathSegments[showIndex + 1];
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç URL
    return pathSegments[pathSegments.length - 1];
  }

  // –°—Ç—Ä–æ–∏–º URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
  buildApiUrl() {
    if (this.currentClass && this.currentClass.match(/^\d+$/)) {
      return `/api/variants/${this.currentClass}`;
    }
    return "/api/variants"; // –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –µ—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ —É–∫–∞–∑–∞–Ω
  }

  init() {
    this.updatePageTitle();
    this.checkAuthAndUpdateProfile();
    this.loadVariants();
    this.setupEventListeners();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  async checkAuthAndUpdateProfile() {
    try {
      const response = await fetch("/verify", {
        method: "GET",
        credentials: "include",
      });

      if (response.ok) {
        const data = await response.json();
        if (data.verify === "true") {
          this.updateProfileButton();
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
  updateProfileButton() {
    const authBtn = document.getElementById("auth-profile-btn");
    if (!authBtn) return;

    authBtn.onclick = function () {
      window.location = "/user/profile";
    };
    authBtn.textContent = "–ü—Ä–æ—Ñ–∏–ª—å";
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É—á–µ—Ç–æ–º –∫–ª–∞—Å—Å–∞
  updatePageTitle() {
    if (this.currentClass && this.currentClass.match(/^\d+$/)) {
      document.title = `Formular - ${this.currentClass} –∫–ª–∞—Å—Å`;

      // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const pageHeader = document.querySelector("h1");
      if (pageHeader) {
        pageHeader.textContent = `–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è ${this.currentClass} –∫–ª–∞—Å—Å–∞`;
      }
    }
  }

  async loadVariants() {
    try {
      this.showLoading();
      console.log(
        `–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞: ${this.currentClass || "–≤—Å–µ"}`,
      );

      const response = await fetch(this.apiUrl);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: —Å success –ø–æ–ª–µ–º –∏ –±–µ–∑
      let variants = data.variants || data;

      if (Array.isArray(variants)) {
        this.renderVariants(variants);
      } else {
        this.showError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", error);
      this.showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
    }
  }

  renderVariants(variants) {
    if (!variants || variants.length === 0) {
      this.showEmptyState();
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –∫–ª–∞—Å—Å—É (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –≤—Å–µ)
    const filteredVariants = this.currentClass
      ? variants.filter((variant) => variant.class === this.currentClass)
      : variants;

    if (filteredVariants.length === 0) {
      this.showEmptyStateForClass();
      return;
    }

    const variantsHTML = filteredVariants
      .map((variant) => this.createVariantCard(variant))
      .join("");

    this.variantsHolder.innerHTML = `
            <div class="variants-container">
                ${variantsHTML}
            </div>
        `;

    this.setupCardInteractions();
  }

  createVariantCard(variant) {
    const solvedIcon = variant.solved ? "‚úÖ" : "‚è≥";
    const hasVideo = variant.videoFilePath && variant.videoFilePath !== "";

    return `
            <div class="variant-card" data-uuid="${variant.uuid}">
                <div class="variant-header">
                    <h3 class="variant-title">${this.escapeHtml(variant.name)}</h3>
                    <span class="variant-badge">${variant.class} –∫–ª–∞—Å—Å</span>
                </div>

                <div class="variant-meta">
                    <span class="meta-item">
                        <span class="meta-icon">üìö</span>
                        ${this.escapeHtml(variant.subject)}
                    </span>
                    <span class="meta-item">
                        <span class="meta-icon">${solvedIcon}</span>
                        ${variant.solved ? "–†–µ—à–µ–Ω" : "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"}
                    </span>
                </div>

                ${
                  variant.description
                    ? `
                    <p class="variant-description">
                        ${this.escapeHtml(variant.description)}
                    </p>
                `
                    : ""
                }

                <div class="variant-actions">
                    <a href="/api/get-variant/${variant.uuid}"
                       class="action-btn action-btn-primary"
                       target="_blank">
                        üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
                    </a>
                </div>
            </div>
        `;
  }

  showEmptyStateForClass() {
    this.variantsHolder.innerHTML = `
            <div class="empty-state">
                <h3>üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–î–ª—è ${this.currentClass} –∫–ª–∞—Å—Å–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</p>
                <button onclick="window.location='/variants'" class="action-btn action-btn-primary" style="margin-top: 1rem;">
                    üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                </button>
            </div>
        `;
  }

  setupCardInteractions() {
    const cards = this.variantsHolder.querySelectorAll(".variant-card");

    cards.forEach((card) => {
      card.addEventListener("click", (e) => {
        if (!e.target.closest(".action-btn")) {
          const uuid = card.dataset.uuid;
          this.showVariantDetails(uuid);
        }
      });
    });
  }

  showVariantDetails(uuid) {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    window.open(`/api/get-variant/${uuid}`, "_blank");
  }

  showLoading() {
    this.variantsHolder.innerHTML = `
            <div class="loading">
                <div class="loading-spinner"></div>
                <p style="margin-top: 1rem;">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è ${this.currentClass || "–≤—Å–µ—Ö"} –∫–ª–∞—Å—Å–æ–≤...</p>
            </div>
        `;
  }

  showError(message) {
    this.variantsHolder.innerHTML = `
            <div class="error-message">
                <h3>üòï –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>${this.escapeHtml(message)}</p>
                <button onclick="location.reload()" class="action-btn action-btn-primary" style="margin-top: 1rem;">
                    üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
  }

  showEmptyState() {
    this.variantsHolder.innerHTML = `
            <div class="empty-state">
                <h3>üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            </div>
        `;
  }

  escapeHtml(text) {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }

  setupEventListeners() {
    document.addEventListener("keydown", (e) => {
      if (e.key === "r" && e.ctrlKey) {
        e.preventDefault();
        this.loadVariants();
      }
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
  new VariantsManager();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.VariantsManager = {
  refresh: function () {
    new VariantsManager().loadVariants();
  },

  filterByClass: function (className) {
    window.location.href = `/api/variants/${className}`;
  },
};
